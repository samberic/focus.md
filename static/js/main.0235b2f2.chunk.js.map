{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["keyMap","PREVIEW","SAVE","BOLD","ITALIC","CODE","Mousetrap","e","element","combo","tagName","contentEditable","configure","ignoreTags","App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlers","event","setState","state","objectSpread","preview","wrapAction","FileSaver","require","blob","Blob","txt","type","saveAs","md","MarkdownIt","rerender","text","target","value","setText","localStorage","getItem","rendered","render","bold","textArea","refs","myTextArea","selectionStart","selectionEnd","diff","newValue","substring","console","log","callback","_this2","setItem","previewClass","classNames","column","hidden","show","react_default","a","createElement","className","index_es","id","onChange","ref","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0235b2f2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport MarkdownIt from 'markdown-it'\nimport {configure, GlobalHotKeys} from 'react-hotkeys'\nimport * as Mousetrap from 'mousetrap';\nimport classNames from 'classnames'\nimport {saveAs} from 'file-saver';\n\nconst keyMap = {\n    PREVIEW: \"ctrl+shift+p\",\n    SAVE: \"ctrl+s\",\n    BOLD: \"ctrl+b\",\n    ITALIC: \"ctrl+i\",\n    CODE: \"ctrl+shift+b\"\n};\n\n\nMousetrap.stopCallback = function (e, element, combo) {\n    // stop for input, select, and textarea\n    return element.tagName == 'TEXTAREA' || (element.contentEditable && element.contentEditable == 'true');\n};\n\nconfigure({\n    ignoreTags: []\n})\n\nclass App extends Component {\n\n    handlers = {\n        PREVIEW: event => this.setState((state) => {\n            return {\n                ...state,\n                preview: !state.preview\n            }\n        }),\n\n        BOLD: event => {\n            let bold = \"**\";\n            this.wrapAction(bold);\n        },\n        ITALIC: event => {\n            let bold = \"__\";\n            this.wrapAction(bold);\n        },\n        CODE: event => {\n            let bold = \"```\";\n            this.wrapAction(bold);\n        },\n        SAVE: event => {\n            var FileSaver = require('file-saver');\n            var blob = new Blob([this.state.txt], {type: \"text/plain;charset=utf-8\"});\n            FileSaver.saveAs(blob, \"hello world.txt\");\n        }\n\n    };\n\n    wrapAction(bold) {\n        let textArea = this.refs.myTextArea;\n        const {selectionStart, selectionEnd} = textArea;\n        let diff = selectionEnd - selectionStart;\n\n        const newValue =\n            this.state.txt.substring(0, selectionStart) +\n            bold + this.state.txt.substring(selectionStart, selectionEnd) +\n            bold + this.state.txt.substring(selectionEnd);\n\n        this.setText(newValue, () => {\n\n            textArea.selectionStart = selectionStart + 2;\n            console.log(textArea.selectionStart+  \" and \" +textArea.selectionEnd)\n            textArea.selectionEnd = textArea.selectionStart + diff;\n        });\n    }\n\n    md = new MarkdownIt();\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            txt: localStorage.getItem(\"doco\") || \"Text here...\",\n            rendered: this.md.render(localStorage.getItem(\"doco\") || \"Text here...\"),\n            preview: false\n        }\n    }\n\n    rerender = (event) => {\n        let text = event.target.value;\n        this.setText(text);\n    }\n\n    setText(text, callback) {\n        localStorage.setItem(\"doco\", text)\n\n        console.log(\"rendering: \" + text)\n        this.setState(state => { return {...state, txt: text, rendered: this.md.render(text)}}, callback);\n    }\n\n    render() {\n        const previewClass = classNames({\n            'column': true,\n            'hidden': !this.state.preview,\n            'show': this.state.preview\n        });\n\n        return (\n            <div className=\"App\">\n                <GlobalHotKeys keyMap={keyMap} handlers={this.handlers}/>\n\n                <header className=\"App-header\">\n                </header>\n                <div className=\"wrapper\">\n                    <div className='row'>\n                        <div className='column'>\n                            <textarea id=\"txt\" onChange={this.rerender} ref=\"myTextArea\" value={this.state.txt}></textarea>\n                        </div>\n                        <div className={previewClass}>\n                            <div dangerouslySetInnerHTML={{__html: this.state.rendered}}></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}